{"version":3,"sources":["App.module.css","components/launchesList/success.svg","components/launchesList/thumb.svg","images/SpaceXLogo.svg","components/launchesList/LaunchesList.module.css","components/launchesList/LaunchesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","app","applogo","App-logo-spin","appheader","mainContentPage","__webpack_require__","p","launchesListHolder","launchListTitle","launchListItemContent","launchListItemContentTitle","launcItemHolder","launcItemHolderValueText","launcItemHolderValueImages","launcItemHolderRowTitleValuetext","launcItemHolderRowPart","missionPatch","LAUNCHES_QUERY","gql","_templateObject","LaunchesList","react_default","a","createElement","className","styles","react_apollo_esm","query","_ref","loading","error","data","console","log","launches","map","launch","mission_name","key","flight_number","links","mission_patch_small","src","alt","rocket","rocket_name","launch_year","dist_default","format","launch_date_local","launch_success","successIcon","failIcon","rocket_type","Component","client","ApolloClient","uri","App","logo","LaunchesList_LaunchesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e60f8502.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3C_xl\",\"applogo\":\"App_applogo__1Dg05\",\"App-logo-spin\":\"App_App-logo-spin__1cABh\",\"appheader\":\"App_appheader__qEyc4\",\"mainContentPage\":\"App_mainContentPage__3WvqA\"};","module.exports = __webpack_public_path__ + \"static/media/success.fc2466e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumb.f7539fe5.svg\";","module.exports = __webpack_public_path__ + \"static/media/SpaceXLogo.6ff54c0f.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"launchesListHolder\":\"LaunchesList_launchesListHolder__3SG1k\",\"launchListTitle\":\"LaunchesList_launchListTitle__2zeRJ\",\"launchListItemContent\":\"LaunchesList_launchListItemContent__1-KFI\",\"launchListItemContentTitle\":\"LaunchesList_launchListItemContentTitle__2hRSg\",\"launcItemHolder\":\"LaunchesList_launcItemHolder__Zp6lr\",\"launcItemHolderValueText\":\"LaunchesList_launcItemHolderValueText__2KdW8\",\"launcItemHolderValueImages\":\"LaunchesList_launcItemHolderValueImages__1kRgB\",\"launcItemHolderRowTitleValuetext\":\"LaunchesList_launcItemHolderRowTitleValuetext__2lazV\",\"launcItemHolderRowPart\":\"LaunchesList_launcItemHolderRowPart__3f1fC\",\"missionPatch\":\"LaunchesList_missionPatch__1nXwq\"};","import React, { Component } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport Moment from 'react-moment';\r\n\r\nimport styles from './LaunchesList.module.css';\r\nimport successIcon from './success.svg';\r\nimport failIcon from './thumb.svg';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\nquery LaunchesQuery{\r\n    launches {\r\n        flight_number\r\n        launch_year\r\n        mission_name\r\n        launch_success\r\n        launch_date_local\r\n        launch_date_unix\r\n        rocket {\r\n            rocket_name\r\n            rocket_type \r\n        }\r\n        links{\r\n            mission_patch_small\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\nexport default class LaunchesList extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.launchesListHolder}>\r\n                <h1 className={styles.launchListTitle}> Launches list:</h1>\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <p>Loading...</p>;\r\n                        if (error) return <p>Error</p>;\r\n\r\n                        return console.log(data) || data.launches.map(launch => (\r\n                            <div className={styles.launchListItemContent}>\r\n                                <h3 className={styles.launchListItemContentTitle}>{launch.mission_name}</h3>\r\n                                <div key={launch.flight_number} className={styles.launcItemHolder}>\r\n                                    {launch.links.mission_patch_small !== null\r\n                                        && (<p className={styles.launcItemHolderRowPart}><img className={styles.missionPatch} src={launch.links.mission_patch_small} alt={launch.rocket.rocket_name}></img></p>)}\r\n                                    <p className={styles.launcItemHolderRowPart}>\r\n                                        <span className={styles.launcItemHolderRowTitleValuetext}>flight_number:</span>\r\n                                        <span className={styles.launcItemHolderValueText}>{launch.flight_number}</span>\r\n                                    </p>\r\n                                    <p className={styles.launcItemHolderRowPart}>\r\n                                        <span className={styles.launcItemHolderRowTitleValuetext}>launch_year:</span>\r\n                                        <span className={styles.launcItemHolderValueText}>{launch.launch_year}</span>\r\n                                    </p>\r\n                                    <p className={styles.launcItemHolderRowPart}>\r\n                                        <span className={styles.launcItemHolderRowTitleValuetext}>launch_date:</span>\r\n                                        <span className={styles.launcItemHolderValueText}><Moment format=\"DD-MMMM HH:mm\">{launch.launch_date_local}</Moment></span>\r\n                                    </p>\r\n                                    <p className={styles.launcItemHolderRowPart}>\r\n                                        <span className={styles.launcItemHolderRowTitleValuetext}>success:</span>\r\n                                        <span className={styles.launcItemHolderValueImages}>{launch.launch_success ? <img src={successIcon} alt=\"success_icon\"></img> : <img src={failIcon} alt=\"fail_icon\"></img>}</span>\r\n                                    </p>\r\n                                    <p className={styles.launcItemHolderRowPart}><span className={styles.launcItemHolderRowTitleValuetext}>rocket name:</span><span className={styles.launcItemHolderValueText}>{launch.rocket.rocket_name}</span></p>\r\n                                    <p className={styles.launcItemHolderRowPart}><span className={styles.launcItemHolderRowTitleValuetext}>rocket type:</span><span className={styles.launcItemHolderValueText}>{launch.rocket.rocket_type}</span></p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                        );\r\n                    }}\r\n                </Query>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo';\nimport LaunchesList from './components/launchesList/LaunchesList'\n\n\nimport styles from './App.module.css'\nimport logo from './images/SpaceXLogo.svg'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3003/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className={styles.app}>\n          <header className={styles.appheader}>\n            <img src={logo} className={styles.applogo} alt=\"logo\" />\n          </header>\n          <main className={styles.mainContentPage}>\n            <LaunchesList></LaunchesList>\n          </main>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}